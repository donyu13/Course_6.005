- what Thread Safe
behaves correctly: satisfy spec and preserve rep invariant
regardless of how threads executed
w/o additional coordination like you can't call get() while set() in progress
- how Thread Safe
    + Confinement
        keep mutable data(pointed) confined to a single thread w/o sharing e.g. local variables
    + Immutability
        make shared data immutable e.g. final variables (but it points to are not immutable
        + what
            no mutator methods
            all fields are private and final
            no rep exposure
            no mutatbion even if mutatble objs in the rep
    + (store shared mutable data in existing) Threasafe DT
        + Threadsafe Collections
            - Collections.synchronizedMap(new HashMap<>())
            - Iterators are still not threadsafe
              have to acquire the collection's lock
            - still races
              have to argue that the races donâ€™t threaten this invariant.
    + synchronization
        have to argue
- how Safety Argument
    - catalog all threads
    - data they use
    - which tech you use
        last two have to argue invariants I depend on are not threatened by interleaving
    e.g.
    // Rep invariant:
    //    0 <= start <= a.length
    //    0 <= len <= a.length-start
    // Abstraction function:
    //    represents the string of characters a[start],...,a[start+length-1]
    // Thread safety argument:
    //    This class is threadsafe because it's immutable:
    //    - a, start, and len are final
    //    - a points to a mutable char array, which may be shared with other
    //      String objects, but they never mutate it
    //    - the array is never exposed to a client
    Serialization:
        What we demand from a threadsafe data type is that 
            when clients call its atomic operations concurrently, 
            the results are consistent with some sequential ordering of the calls. 
            In this case, clearing and inserting, that means either clear-followed-by-insert, or insert-followed-by-clear. 
            This property is called serializability: for any set of operations executed concurrently, the result (the values and state observable by clients) must be a result given by some sequential ordering of those operations.
        
