A specification acts as a crucial firewall between the implementor of a procedure and its client. 
It makes separate development possible: 
    the client is free to write code that uses the procedure without seeing its source code, 
    and the implementor is free to write the code that implements the procedure without knowing how it will be used.




as a contract on both, which implementer meets and the client uses the method can rely on.
client: caller of the method
- Part1: Specifications
    + why
        diff programmers on a team have diff specs in mind
        easier for client to read than src code
        implementor can change impl w/o telling clients
        as a firewall between client an implementor, decoupling
    + behavioral equivalence 
        depends on spec
    + Spec structure
        precondition, indicated by requires, obligation of client
        postcondition, indicated by effects, obligation of impler
    + Spec in Java
        static type declarations
        non-type in comment, pre @param, post @return
        + comments in Java
            // Single-line comment
            /* Multi-line 
               comment. */
        + Javadoc comments
            /**
             * Concise summary here, use <code>, omit parenthesis, method desc begins with a verb,
             * @autor Xinrong
             * @version 0.1
             * @param
             * @return
             * @throws 
             * @since 0.0
             */
        + Running The Javadoc Tool
            produce an API similar to the Java API
            produce a set of HTML pages to document ...
    + Null Ref
        Avoid null
        precondition and postcondition non-null
        null is implicitly disallowed unless stated 
    + Testing according to spec rather than code
        black box know spec only
        glass box know spec and impl. (spec is old big)
        + Unit testing
            test each module (one single spec)
        + Integration testing
            test a comb of modules

- Part 2: Exceptions
    + for signaling bugs
    + for special results (get help from compiler)
        + exception in java
            - what
                An exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions.
    + Checked and unchecked exceptions
        + checked
            by compiler
            declare in signature OR handle it
            to special results (client anticipated)
        + unchecked
            to signal bugs (client unexpected failures)
            
    + Throwable hierarchy
        that's how Java detects whether exception is checked or unchecked
        class Throwable can be thrown or caught
        subclass Error, RuntimeException are unchecked
        rest subclass Exception are checked
        we can only customize exception subclass Exception or RuntimeException
    + Exception design considerations
        exceptions cost, that's why many API use null ref as a special value
        - unchecked exception for unexpectd failure OR we can exptect clients always avoid it
        - others, checked
        
   
        
        
        
