- Summary
 Concurrency: multiple computations running simultaneously
 Shared-memory & message-passing paradigms
 Processes & threads
    Process is like a virtual computer; thread is like a virtual processor
 Race conditions
    When correctness of result (postconditions and invariants) depends on the relative timing of events
----------------------------------------------------------------
- Concurrency
multi computations happen at the same time 
don't take it narrow sense, it includes
  multi pc in a network
  multi app in a pc
  multi processors in a pc
aim to get a computation to run faster

- Two Models for concurrent modules communicate
    + Shared Memory
        reading and writing shared objects in physical memory, common filesystem, Java
    + Message Passing
        sendng messages to each other through a communication channel as network communications, manual pipe
- processes, threads, time-slicing
    + concurrent modules
       - Process
            isolated inst of a running program
            represents a virtual computer
            ready for message passing
       - Thread
            a place in a running program (plus the stack of method calls)
            represents a virtual processor
            ready for shared memory (threads share all the memory in process)
                so, to set up message-passing explicitly, we use queue
    + Time slicing
            when there are more threads than processors, concurrency is simulated by time slicing
            i.e. processor switches between threads
    + When a program starts, it automatically gets one process to run in, and it gets one thread for its execution.

- Interleaving
    low-level instructions interleave with each other
    which causes shared memory problem
- Race Condidtion
    correctness of the program depends on the relative timing of events between A and B
    |_ satisfaction of postconditions and invariants
    A is in a race with B
- Tweak your code won't work
    you can’t tell by looking at an expression whether it will be safe from race conditions
    it isn’t atomic just because it’s one line of Java
    because compilers are lazy at storeback during computations
- Concurrency is Hard to Test and Debug
    They are heisenbug (compared with bohrbug in sequential programming)
    println or debugger cannot be used 
        for they are much slower than other operations, often 100-1000x slower, that they dramatically change the timing of operations, and the interleaving
    
    
  
